#!/bin/bash --rcfile

# Copyright (c) 2019, Jonathan Cyriax Brast
# 
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


du=$(which du)
ls=$(which ls)
cat=$(which cat)
cut=$(which cut)
sort=$(which sort)
dirname=$(which dirname)
sed=$(which sed)
grep=$(which grep)
uniq=$(which uniq)
rsync=$(which rsync)
tail=$(which tail)

alias ls="$ls --color=always"
alias mkdir=$(which mkdir)
alias rm=$(which rm)
alias rmdir=$(which rmdir)
alias du=$du
alias grep=$grep

export HISTFILE=$PWD/.cyriax.backup.history
export BLACKLIST=$PWD/.cyriax.backup.blacklist

declare -A blacklist
declare -A blacklistsize
declare -A sizes

help(){
echo "help         - this text"
echo "ll           - lists and sorts by remaining backup size"
echo "               takes blacklists into consideration"
echo "bl FILES     - blacklists FILES to exclude from backup"
echo " blacklist"
echo "ub PATTERN   - unblacklists PATTERN (deletes from blacklist)"
echo " unblacklist"
echo "sync DEST    - uses rsync to sync to a destination (dry run first)"
echo "load         - loads blacklist (happens automatically)"
echo "save         - saves blacklist (happens automatically)"
echo "               (on sync and on exit)"
echo "cd,ls,exit - usual shell commands"
}

_human(){
    echo $1 |$sed '
        s/^\([0-9]\{1,3\}\)\([0-9]\)[0-9]\{8\}$/\1.\2T/
        s/^\([0-9]\{1,3\}\)\([0-9]\)[0-9]\{5\}$/\1.\2G/
        s/^\([0-9]\{1,3\}\)\([0-9]\)[0-9]\{2\}$/\1.\2M/
        s/^\([0-9]\{1,3\}\)$/\1K/'
}

ll(){
    ($ls -A1 --color=no|while read f;do
        fl=$PWD/$f
        [ ${blacklist["$fl"]+_} ] && continue
        size=$((${sizes["$fl"]}-${blacklistsize["$fl"]}))
        echo $(_human $size) $f
    done)|$sort -h
}

_pathsanitize(){
    f="$*"
    [[ "$f" =~ "$PWD" ]] || f=$PWD/$f
    echo $f|$sed 's_/\.\?$__'
}

blacklist(){
    if [ -z "$1" ]; then
        (
        for p in ${!blacklist[@]};do
            echo $(_human ${sizes["$p"]}) $p
        done
        )|$sort -h
    else
        for p in "$@";do
            f=$(_pathsanitize $p)
            blacklist["$f"]=1
            size=${sizes[$f]:=$($du -d0 $f|$cut -f 1)}
            dir=$f
            while [ ${#dir} -ge ${#ROOT} ];do
                blacklistsize[$dir]=$((${blacklistsize[$dir]:=0}+$size))
                dir=$($dirname $dir)
            done
        done
    fi
    export sizes
    export blacklist
    export blacklistsize
}
alias bl=blacklist

unblacklist(){
    pattern=$(echo $*|$sed 's_/$__')
    for f in ${!blacklist[@]};do
        if [[ "$f" =~ "$pattern" ]]; then
            echo unblacklisted $f
            unset blacklist[$f]
            size=${sizes[$f]:=$($du -d0 $f|$cut -f 1)}
            dir=$f
            while [ ${#dir} -ge ${#ROOT} ];do
                blacklistsize[$dir]=$((${blacklistsize[$dir]}-$size))
                dir=$($dirname $dir)
            done
        fi
    done
    export blacklist
    export blacklistsize
}
alias ub=unblacklist

_pcmd(){

    if [ ! `pwd|$grep $ROOT` ];then
        cd $ROOT
        echo -e "\033[1;31mNot leaving $ROOT\033[0m"
    fi

    sizeC=${sizes[$PWD]:=$($du -d0 $PWD|$cut -f 1)}
    bsizeC=${blacklistsize[$PWD]:=0}
    sizeR=${sizes[$ROOT]:=$($du -d0 $ROOT|$cut -f 1)}
    bsizeR=${blacklistsize[$ROOT]:=0}

    IFS=$'\n'
    for f in $($ls -A1 --color=no);do
        f="$PWD/$f"
        ((${sizes["$f"]:=$($du -d0 "$f"|$cut -f 1)}))
        ((${blacklistsize["$f"]:=0}))
    done

    h_max=$(_human $(($sizeR-$bsizeR)))
    h_bls=$(_human $bsizeR)
    h_tot=$(_human $sizeR)
    echo -e "\033[1;33m$h_max (backup)\033[1;34m $h_bls/\033[1;35m$h_tot\033[1;34m (blacklisted)\033[0m"
    h_max=$(_human $(($sizeC-$bsizeC)))
    h_bls=$(_human $bsizeC)
    h_tot=$(_human $sizeC)


    export PS1="\[\033[01;34m\]\w\[\033[0m\]:\[\033[1;33m\](\[\033[1;34m\]\$h_bls<\[\033[1;33m\]-\$h_max)\[\033[00m\]> "
    export sizes
    export blacklistsize
    export whitlistsize
}

sync(){
    save
    dest="$*"
    $rsync --exclude-from=$BLACKLIST --info=STATS -anh $ROOT $1|$tail -2
    echo Destination: $dest
    echo -en "\033[1;31mDoes this look right to you?\033[0m [Ny]> "
    read ans
    if [ "xy" == "x$ans" ];then
        $rsync --exclude-from=$BLACKLIST --info=STATS -aPh $ROOT $1
    else
        echo Cancelling...
    fi

}



save(){
    (
        #[ -e $BLACKLISTFILE ] &&  $cat $BLACKLISTFILE
        IFS=$'\n'
        for x in ${!blacklist[@]};do
            echo $x|$sed "s#$ROOT/##"
        done
    )|$sort|$uniq>$BLACKLIST
}

load(){
    [ -e $BLACKLIST ] || return 0
    IFS=$'\n'
    for l in $($cat $BLACKLIST);do
        bl $l
    done
}


export ROOT=$PWD
export sizes
export blacklist
export blacklistsize

echo -en "\033[1;31m"
$cat << EOF
  ___ _   _ _ __(_) __ ___  __ /
 / __| | | | '__| |/ _\` \\ \\/ /
| (__| |_| | |  | | (_| |>  <
 \\___|\\__, |_|  |_|\\__,_/_/\\_\\
      |___/
EOF
echo -e "\033[0m"
help
echo -e "\033[1;35m"
echo "   Backup Blacklist Generator   "
echo -e "\033[0m"

load

PROMPT_COMMAND=_pcmd
trap save EXIT
export PATH=''
